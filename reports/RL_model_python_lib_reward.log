Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/nbclient/client.py", line 1269, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/nbclient/util.py", line 85, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/nbclient/util.py", line 60, in just_run
    return loop.run_until_complete(coro)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/nbclient/client.py", line 707, in async_execute
    await self.async_execute_cell(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/nbclient/client.py", line 1025, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/nbclient/client.py", line 919, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""
Functions for adding reward values
"""


import pandas as pd

# from utils import *

#####################################
### Opponent previous move counts ###
#####################################

def get_opponent_move(sub_df):
    """
    fills in the `opponent_move` column
    """
    for i in range(len(sub_df)):
        if i%2 == 0:
            sub_df.at[i, 'opponent_move'] = sub_df.at[i + 1, 'player_move']
        else:
            sub_df.at[i, 'opponent_move'] = sub_df.at[i - 1, 'player_move']

    return sub_df



#########################
### human reward move ###
#########################

def human_reward_move(sub_df):
    """
    tally human rewards on its rock, paper, or scissors moves.
    3 points for a win, 0 for a tie, -1 for a loss
    """
    # reward dictionary
    dic_reward={'win':3,'tie':0,'loss':-1}
    # initialization reward of each game
    dic_move={'rock':0,'paper':0,'scissors':0}

    # loop through the human rows
    for i in range(0,len(sub_df),2):
        # fetch player outcomes
        outcome=sub_df.get('player_outcome').iloc[i]
        # fetch player moves
        move=sub_df.get('player_move').iloc[i]
        # avoid all the nans and 'none's in player_move
        if move != 'none'and not pd.isna(move):
            # tally all the point associated with rewards
            dic_move[move]+=dic_reward[outcome]
            # get the correspounding move's reward column name
            col_name=move+'_reward'

            # store reward points in the reward column
            sub_df.at[i,'rock_reward']=dic_move['rock']
            sub_df.at[i,'paper_reward']=dic_move['paper']
            sub_df.at[i,'scissors_reward']=dic_move['scissors']
    return sub_df

#############################################
### human reward on past and current move ###
#############################################

def human_reward_past_cur_move(sub_df):
    """
    tally human reward based on its past move and current move.
    """
    dic_reward={'win':3,'tie':0,'loss':-1}
    # initialize dic_move to store reward for each combination
    dic_move={'rock':{'rock':0,'paper':0,'scissors':0},'paper':{'rock':0,'paper':0,'scissors':0},
    'scissors':{'rock':0,'paper':0,'scissors':0}}
    for i in range(2,len(sub_df),2):
        # human current outcome
        outcome=sub_df.get('player_outcome').iloc[i]
        # human previous move
        pre_move=sub_df.get('player_move').iloc[i-2]
        # human current move
        cur_move=sub_df.get('player_move').iloc[i]
        # ignore Nan cells
        if pre_move != 'none'and not pd.isna(pre_move) and\
         cur_move != 'none'and not pd.isna(cur_move):
            # get reward for move combination of current round
            dic_move[pre_move][cur_move]+=dic_reward[outcome]
            # fill in reward
            sub_df.at[i,'rock_rock_reward']=dic_move['rock']['rock']
            sub_df.at[i,'rock_paper_reward']=dic_move['rock']['paper']
            sub_df.at[i,'rock_scissors_reward']=dic_move['rock']['scissors']
            sub_df.at[i,'paper_rock_reward']=dic_move['paper']['rock']
            sub_df.at[i,'paper_paper_reward']=dic_move['paper']['paper']
            sub_df.at[i,'paper_scissors_reward']=dic_move['paper']['scissors']
            sub_df.at[i,'scissors_rock_reward']=dic_move['scissors']['rock']
            sub_df.at[i,'scissors_paper_reward']=dic_move['scissors']['paper']
            sub_df.at[i,'scissors_scissors_reward']=dic_move['scissors']['scissors']
    return sub_df

###############################################################
### human reward on opponent past move and own current move ###
###############################################################

def human_reward_oppo_past_cur_move(sub_df):
    """
    tally rewards based on the combination of opponent's past move and
    human current move
    """
    dic_reward={'win':3,'tie':0,'loss':-1}
    # initialize dic_move to store reward of move combination
    dic_move={'rock':{'rock':0,'paper':0,'scissors':0},'paper':{'rock':0,'paper':0,'scissors':0},
    'scissors':{'rock':0,'paper':0,'scissors':0}}
    for i in range(2,len(sub_df),2):
        # outcome of current round
        outcome=sub_df.get('player_outcome').iloc[i]
        # opponent previous move
        oppo_pre_move=sub_df.get('player_move').iloc[i-1]
        # human current move
        cur_move=sub_df.get('player_move').iloc[i]
        # get rid of Nan cells
        if oppo_pre_move != 'none'and not pd.isna(oppo_pre_move) \
        and cur_move != 'none'and not pd.isna(cur_move):
            # get reward of move combination
            dic_move[oppo_pre_move][cur_move]+=dic_reward[outcome]
            # fill in reward value
            sub_df.at[i,'opponent_rock_rock_reward']=dic_move['rock']['rock']
            sub_df.at[i,'opponent_rock_paper_reward']=dic_move['rock']['paper']
            sub_df.at[i,'opponent_rock_scissors_reward']=dic_move['rock']['scissors']
            sub_df.at[i,'opponent_paper_rock_reward']=dic_move['paper']['rock']
            sub_df.at[i,'opponent_paper_paper_reward']=dic_move['paper']['paper']
            sub_df.at[i,'opponent_paper_scissors_reward']=dic_move['paper']['scissors']
            sub_df.at[i,'opponent_scissors_rock_reward']=dic_move['scissors']['rock']
            sub_df.at[i,'opponent_scissors_paper_reward']=dic_move['scissors']['paper']
            sub_df.at[i,'opponent_scissors_scissors_reward']=dic_move['scissors']['scissors']
    return sub_df

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 6>[0;34m()[0m
[1;32m      1[0m [38;5;124;03m"""[39;00m
[1;32m      2[0m [38;5;124;03mFunctions for adding reward values[39;00m
[1;32m      3[0m [38;5;124;03m"""[39;00m
[0;32m----> 6[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[1;32m      8[0m [38;5;66;03m# from utils import *[39;00m
[1;32m      9[0m 
[1;32m     10[0m [38;5;66;03m#####################################[39;00m
[1;32m     11[0m [38;5;66;03m### Opponent previous move counts ###[39;00m
[1;32m     12[0m [38;5;66;03m#####################################[39;00m
[1;32m     14[0m [38;5;28;01mdef[39;00m [38;5;21mget_opponent_move[39m(sub_df):

[0;31mModuleNotFoundError[0m: No module named 'pandas'
ModuleNotFoundError: No module named 'pandas'

